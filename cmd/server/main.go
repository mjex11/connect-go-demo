package main

import (
    "context"
    "fmt"
    "log"
    "net/http"

    "github.com/bufbuild/connect-go"
    "golang.org/x/net/http2"
    "golang.org/x/net/http2/h2c"

    promotionv1 "promotion/gen/promotion/v1" // generated by protoc-gen-go
    "promotion/gen/promotion/v1/promotionv1connect" // generated by protoc-gen-connect-go
)

type PromotionServer struct{}

func (s *PromotionServer) GetPointBlance(
    ctx context.Context,
    req *connect.Request[promotionv1.GetPointBlanceRequest],
) (*connect.Response[promotionv1.GetPointBlanceResponse], error) {
    log.Println("Request headers: ", req.Header())
	log.Println(fmt.Sprintf("Hello MemberID: , %d!", req.Msg.MemberId))
    res := connect.NewResponse(&promotionv1.GetPointBlanceResponse{
        Point: 77777,
    })
    res.Header().Set("promotion-Version", "v1")
    return res, nil
}

func (s *PromotionServer) GivePointBlance(
    ctx context.Context,
    req *connect.Request[promotionv1.GivePointBlanceRequest],
) (*connect.Response[promotionv1.GivePointBlanceResponse], error) {
    log.Println("Request headers: ", req.Header())
	log.Println(fmt.Sprintf("Hello MemberID: , %d!", req.Msg.MemberId))
    res := connect.NewResponse(&promotionv1.GivePointBlanceResponse{
        Point: 88888,
    })
    res.Header().Set("promotion-Version", "v1")
    return res, nil
}

func (s *PromotionServer) TakePointBlance(
    ctx context.Context,
    req *connect.Request[promotionv1.TakePointBlanceRequest],
) (*connect.Response[promotionv1.TakePointBlanceResponse], error) {
    log.Println("Request headers: ", req.Header())
	log.Println(fmt.Sprintf("Hello MemberID: , %d!", req.Msg.MemberId))
    res := connect.NewResponse(&promotionv1.TakePointBlanceResponse{
        Point: 99999,
    })
    res.Header().Set("promotion-Version", "v1")
    return res, nil
}

func main() {
    server := &PromotionServer{}
    mux := http.NewServeMux()
    path, handler := promotionv1connect.NewPromotionServiceHandler(server)
    mux.Handle(path, handler)
    http.ListenAndServe(
        "localhost:8080",
        // Use h2c so we can serve HTTP/2 without TLS.
        h2c.NewHandler(mux, &http2.Server{}),
    )
}